# -*- coding: utf-8 -*-
"""
Created on Tue Oct  9 14:54:53 2018

@author: Raphael Loo
"""
import numpy as np

def mround(a, epsilon=0):
    for i in range(np.size(a,0)):
        for j in range(np.size(a,1)):
            if a[i][j] < epsilon:
                a[i][j]=0
    return a

def dot(a,b):
        if type(a) and type(b) in [tuple, list]:
            if len(a)!=len(b):
                 raise Exception('cannot multiply %i x1 vector with %i x1 vector' % (len(a), len(b)))
            else:
                return sum([a*b for a,b in zip(a,b)])
        elif type(a) and type(b) in [np.ndarray]:
            if np.size(a,0)!=1 or np.size(b,0)!=1:
                raise Exception('arguments are not vectors')
            elif np.size(a,1)!=np.size(b,1):
                raise Exception('cannot multiply %i x1 vector with %i x1 vector' % (len(a), len(b)))
            else:
                total=0
                prod=a*b
                for n in prod[0]:
                    total=total+n
                return total
        else:
            raise Exception('wrong datatypes')
            
def transpose(a):
    a_t=np.empty((np.size(a,1),np.size(a,0)))
    for i in range(np.size(a,0)):
        for j in range(np.size(a,1)):
            a_t[j][i]=a[i][j]
    return a_t
            
def mmult(a,b):
    if np.size(a,1)!=np.size(b,0):
        raise Exception('cannot multiply %ix%i matrix with %ix%i matrix' 
                        % (np.size(a,0), np.size(a,1), np.size(b,0), np.size(b,1)))
    else:
        ab=np.empty((np.size(a,0),np.size(b,1)))
        b_t=transpose(b)
        for i in range(np.size(a,0)):
            for j in range(np.size(b,1)):
                ab[i][j]=dot(np.array(a[i],ndmin=2),np.array(b_t[j],ndmin=2))
        return ab
        
def i_mat(a):
    i=np.zeros((a,a))
    for n in range(a):
        i[n][n]=1
    return i
 
def LU(a):
    l=i_mat(np.size(a,0))
    p=i_mat(np.size(a,0))
    u=a
    # swap rows to get the best pivot, construct permutation matrix
    for n in range(np.size(u,1)):
        col=[u[m][n] for m in range(n,np.size(u,0))]
        pivot=n+max(enumerate(col), key=lambda x: x[0])[0]
        row_n=tuple(u[n])
        p_n=tuple(p[n])
        row_piv=tuple(u[pivot])
        p_piv=tuple(p[pivot])
        u[n]=np.array(row_piv)
        p[n]=np.array(p_piv)
        u[pivot]=np.array(row_n)
        p[pivot]=np.array(p_n)
    for i in range(np.size(u,0)):
        for k in range(i+1,np.size(u,0)):
            a=u[k][i]/u[i][i]
            u[k]=u[k]-a*u[i]
            l[k][i]=a
    l=mround(l,epsilon=0.00001)
    u=mround(u,epsilon=0.00001)
    return np.array([l,u,p])
            
        
        
        
           
            

a=np.array([[1,2],[4,5],[7,8]])
b=np.array([[1,0],[0,1]])

# =============================================================================
# print(a)
# print(b)
# print(transpose(b))
# print(mmult(b,a))
# =============================================================================
M=np.array([[1.0,2.0,3.0],[4.0,5.0,6.0],[7.0,8.0,0.0]])
print(LU(M))

from scipy import linalg
p,l,u=linalg.lu(np.array([[1.0,2.0,3.0],[4.0,5.0,6.0],[7.0,8.0,0.0]]))

print(p)
print(l)
print(u)
# =============================================================================
# test=np.empty((np.size(a,1),np.size(a,0)))
# print(test)
# =============================================================================
